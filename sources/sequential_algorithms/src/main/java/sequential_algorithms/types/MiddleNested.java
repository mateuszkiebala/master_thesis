/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package sequential_algorithms.types;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class MiddleNested extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 3364722880709789045L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"MiddleNested\",\"namespace\":\"sequential_algorithms.types\",\"fields\":[{\"name\":\"middle_array\",\"type\":{\"type\":\"array\",\"items\":\"float\"}},{\"name\":\"inner\",\"type\":{\"type\":\"record\",\"name\":\"InnerNested\",\"fields\":[{\"name\":\"inner_int\",\"type\":\"int\"},{\"name\":\"inner_string\",\"type\":\"string\"}]}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<MiddleNested> ENCODER =
      new BinaryMessageEncoder<MiddleNested>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<MiddleNested> DECODER =
      new BinaryMessageDecoder<MiddleNested>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<MiddleNested> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<MiddleNested> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<MiddleNested> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<MiddleNested>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this MiddleNested to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a MiddleNested from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a MiddleNested instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static MiddleNested fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.util.List<java.lang.Float> middle_array;
  @Deprecated public sequential_algorithms.types.InnerNested inner;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public MiddleNested() {}

  /**
   * All-args constructor.
   * @param middle_array The new value for middle_array
   * @param inner The new value for inner
   */
  public MiddleNested(java.util.List<java.lang.Float> middle_array, sequential_algorithms.types.InnerNested inner) {
    this.middle_array = middle_array;
    this.inner = inner;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return middle_array;
    case 1: return inner;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: middle_array = (java.util.List<java.lang.Float>)value$; break;
    case 1: inner = (sequential_algorithms.types.InnerNested)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'middle_array' field.
   * @return The value of the 'middle_array' field.
   */
  public java.util.List<java.lang.Float> getMiddleArray() {
    return middle_array;
  }


  /**
   * Sets the value of the 'middle_array' field.
   * @param value the value to set.
   */
  public void setMiddleArray(java.util.List<java.lang.Float> value) {
    this.middle_array = value;
  }

  /**
   * Gets the value of the 'inner' field.
   * @return The value of the 'inner' field.
   */
  public sequential_algorithms.types.InnerNested getInner() {
    return inner;
  }


  /**
   * Sets the value of the 'inner' field.
   * @param value the value to set.
   */
  public void setInner(sequential_algorithms.types.InnerNested value) {
    this.inner = value;
  }

  /**
   * Creates a new MiddleNested RecordBuilder.
   * @return A new MiddleNested RecordBuilder
   */
  public static sequential_algorithms.types.MiddleNested.Builder newBuilder() {
    return new sequential_algorithms.types.MiddleNested.Builder();
  }

  /**
   * Creates a new MiddleNested RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new MiddleNested RecordBuilder
   */
  public static sequential_algorithms.types.MiddleNested.Builder newBuilder(sequential_algorithms.types.MiddleNested.Builder other) {
    if (other == null) {
      return new sequential_algorithms.types.MiddleNested.Builder();
    } else {
      return new sequential_algorithms.types.MiddleNested.Builder(other);
    }
  }

  /**
   * Creates a new MiddleNested RecordBuilder by copying an existing MiddleNested instance.
   * @param other The existing instance to copy.
   * @return A new MiddleNested RecordBuilder
   */
  public static sequential_algorithms.types.MiddleNested.Builder newBuilder(sequential_algorithms.types.MiddleNested other) {
    if (other == null) {
      return new sequential_algorithms.types.MiddleNested.Builder();
    } else {
      return new sequential_algorithms.types.MiddleNested.Builder(other);
    }
  }

  /**
   * RecordBuilder for MiddleNested instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<MiddleNested>
    implements org.apache.avro.data.RecordBuilder<MiddleNested> {

    private java.util.List<java.lang.Float> middle_array;
    private sequential_algorithms.types.InnerNested inner;
    private sequential_algorithms.types.InnerNested.Builder innerBuilder;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(sequential_algorithms.types.MiddleNested.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.middle_array)) {
        this.middle_array = data().deepCopy(fields()[0].schema(), other.middle_array);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.inner)) {
        this.inner = data().deepCopy(fields()[1].schema(), other.inner);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (other.hasInnerBuilder()) {
        this.innerBuilder = sequential_algorithms.types.InnerNested.newBuilder(other.getInnerBuilder());
      }
    }

    /**
     * Creates a Builder by copying an existing MiddleNested instance
     * @param other The existing instance to copy.
     */
    private Builder(sequential_algorithms.types.MiddleNested other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.middle_array)) {
        this.middle_array = data().deepCopy(fields()[0].schema(), other.middle_array);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.inner)) {
        this.inner = data().deepCopy(fields()[1].schema(), other.inner);
        fieldSetFlags()[1] = true;
      }
      this.innerBuilder = null;
    }

    /**
      * Gets the value of the 'middle_array' field.
      * @return The value.
      */
    public java.util.List<java.lang.Float> getMiddleArray() {
      return middle_array;
    }


    /**
      * Sets the value of the 'middle_array' field.
      * @param value The value of 'middle_array'.
      * @return This builder.
      */
    public sequential_algorithms.types.MiddleNested.Builder setMiddleArray(java.util.List<java.lang.Float> value) {
      validate(fields()[0], value);
      this.middle_array = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'middle_array' field has been set.
      * @return True if the 'middle_array' field has been set, false otherwise.
      */
    public boolean hasMiddleArray() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'middle_array' field.
      * @return This builder.
      */
    public sequential_algorithms.types.MiddleNested.Builder clearMiddleArray() {
      middle_array = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'inner' field.
      * @return The value.
      */
    public sequential_algorithms.types.InnerNested getInner() {
      return inner;
    }


    /**
      * Sets the value of the 'inner' field.
      * @param value The value of 'inner'.
      * @return This builder.
      */
    public sequential_algorithms.types.MiddleNested.Builder setInner(sequential_algorithms.types.InnerNested value) {
      validate(fields()[1], value);
      this.innerBuilder = null;
      this.inner = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'inner' field has been set.
      * @return True if the 'inner' field has been set, false otherwise.
      */
    public boolean hasInner() {
      return fieldSetFlags()[1];
    }

    /**
     * Gets the Builder instance for the 'inner' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public sequential_algorithms.types.InnerNested.Builder getInnerBuilder() {
      if (innerBuilder == null) {
        if (hasInner()) {
          setInnerBuilder(sequential_algorithms.types.InnerNested.newBuilder(inner));
        } else {
          setInnerBuilder(sequential_algorithms.types.InnerNested.newBuilder());
        }
      }
      return innerBuilder;
    }

    /**
     * Sets the Builder instance for the 'inner' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public sequential_algorithms.types.MiddleNested.Builder setInnerBuilder(sequential_algorithms.types.InnerNested.Builder value) {
      clearInner();
      innerBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'inner' field has an active Builder instance
     * @return True if the 'inner' field has an active Builder instance
     */
    public boolean hasInnerBuilder() {
      return innerBuilder != null;
    }

    /**
      * Clears the value of the 'inner' field.
      * @return This builder.
      */
    public sequential_algorithms.types.MiddleNested.Builder clearInner() {
      inner = null;
      innerBuilder = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public MiddleNested build() {
      try {
        MiddleNested record = new MiddleNested();
        record.middle_array = fieldSetFlags()[0] ? this.middle_array : (java.util.List<java.lang.Float>) defaultValue(fields()[0]);
        if (innerBuilder != null) {
          try {
            record.inner = this.innerBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("inner"));
            throw e;
          }
        } else {
          record.inner = fieldSetFlags()[1] ? this.inner : (sequential_algorithms.types.InnerNested) defaultValue(fields()[1]);
        }
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<MiddleNested>
    WRITER$ = (org.apache.avro.io.DatumWriter<MiddleNested>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<MiddleNested>
    READER$ = (org.apache.avro.io.DatumReader<MiddleNested>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    long size0 = this.middle_array.size();
    out.writeArrayStart();
    out.setItemCount(size0);
    long actualSize0 = 0;
    for (java.lang.Float e0: this.middle_array) {
      actualSize0++;
      out.startItem();
      out.writeFloat(e0);
    }
    out.writeArrayEnd();
    if (actualSize0 != size0)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size0 + ", but element count was " + actualSize0 + ".");

    this.inner.customEncode(out);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      long size0 = in.readArrayStart();
      java.util.List<java.lang.Float> a0 = this.middle_array;
      if (a0 == null) {
        a0 = new SpecificData.Array<java.lang.Float>((int)size0, SCHEMA$.getField("middle_array").schema());
        this.middle_array = a0;
      } else a0.clear();
      SpecificData.Array<java.lang.Float> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.Float>)a0 : null);
      for ( ; 0 < size0; size0 = in.arrayNext()) {
        for ( ; size0 != 0; size0--) {
          java.lang.Float e0 = (ga0 != null ? ga0.peek() : null);
          e0 = in.readFloat();
          a0.add(e0);
        }
      }

      if (this.inner == null) {
        this.inner = new sequential_algorithms.types.InnerNested();
      }
      this.inner.customDecode(in);

    } else {
      for (int i = 0; i < 2; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          long size0 = in.readArrayStart();
          java.util.List<java.lang.Float> a0 = this.middle_array;
          if (a0 == null) {
            a0 = new SpecificData.Array<java.lang.Float>((int)size0, SCHEMA$.getField("middle_array").schema());
            this.middle_array = a0;
          } else a0.clear();
          SpecificData.Array<java.lang.Float> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.Float>)a0 : null);
          for ( ; 0 < size0; size0 = in.arrayNext()) {
            for ( ; size0 != 0; size0--) {
              java.lang.Float e0 = (ga0 != null ? ga0.peek() : null);
              e0 = in.readFloat();
              a0.add(e0);
            }
          }
          break;

        case 1:
          if (this.inner == null) {
            this.inner = new sequential_algorithms.types.InnerNested();
          }
          this.inner.customDecode(in);
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










