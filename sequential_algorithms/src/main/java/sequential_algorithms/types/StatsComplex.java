/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package sequential_algorithms.types;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class StatsComplex extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -2180876947797950298L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"StatsComplex\",\"namespace\":\"sequential_algorithms.types\",\"fields\":[{\"name\":\"sum\",\"type\":\"long\"},{\"name\":\"complex\",\"type\":{\"type\":\"record\",\"name\":\"Complex\",\"fields\":[{\"name\":\"null_prim\",\"type\":[\"null\",\"int\"]},{\"name\":\"boolean_prim\",\"type\":\"boolean\"},{\"name\":\"int_prim\",\"type\":{\"type\":\"int\",\"arg.properties\":{\"range\":{\"min\":-100,\"max\":100}}}},{\"name\":\"long_prim\",\"type\":\"long\"},{\"name\":\"float_prim\",\"type\":\"float\"},{\"name\":\"double_prim\",\"type\":\"double\"},{\"name\":\"string_prim\",\"type\":\"string\"},{\"name\":\"bytes_prim\",\"type\":\"bytes\"},{\"name\":\"middle\",\"type\":{\"type\":\"record\",\"name\":\"MiddleNested\",\"fields\":[{\"name\":\"middle_array\",\"type\":{\"type\":\"array\",\"items\":\"float\"}},{\"name\":\"inner\",\"type\":{\"type\":\"record\",\"name\":\"InnerNested\",\"fields\":[{\"name\":\"inner_int\",\"type\":\"int\"},{\"name\":\"inner_string\",\"type\":\"string\"}]}}]}}]}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<StatsComplex> ENCODER =
      new BinaryMessageEncoder<StatsComplex>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<StatsComplex> DECODER =
      new BinaryMessageDecoder<StatsComplex>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<StatsComplex> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<StatsComplex> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<StatsComplex> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<StatsComplex>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this StatsComplex to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a StatsComplex from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a StatsComplex instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static StatsComplex fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public long sum;
  @Deprecated public sequential_algorithms.types.Complex complex;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public StatsComplex() {}

  /**
   * All-args constructor.
   * @param sum The new value for sum
   * @param complex The new value for complex
   */
  public StatsComplex(java.lang.Long sum, sequential_algorithms.types.Complex complex) {
    this.sum = sum;
    this.complex = complex;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return sum;
    case 1: return complex;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: sum = (java.lang.Long)value$; break;
    case 1: complex = (sequential_algorithms.types.Complex)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'sum' field.
   * @return The value of the 'sum' field.
   */
  public long getSum() {
    return sum;
  }


  /**
   * Sets the value of the 'sum' field.
   * @param value the value to set.
   */
  public void setSum(long value) {
    this.sum = value;
  }

  /**
   * Gets the value of the 'complex' field.
   * @return The value of the 'complex' field.
   */
  public sequential_algorithms.types.Complex getComplex() {
    return complex;
  }


  /**
   * Sets the value of the 'complex' field.
   * @param value the value to set.
   */
  public void setComplex(sequential_algorithms.types.Complex value) {
    this.complex = value;
  }

  /**
   * Creates a new StatsComplex RecordBuilder.
   * @return A new StatsComplex RecordBuilder
   */
  public static sequential_algorithms.types.StatsComplex.Builder newBuilder() {
    return new sequential_algorithms.types.StatsComplex.Builder();
  }

  /**
   * Creates a new StatsComplex RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new StatsComplex RecordBuilder
   */
  public static sequential_algorithms.types.StatsComplex.Builder newBuilder(sequential_algorithms.types.StatsComplex.Builder other) {
    if (other == null) {
      return new sequential_algorithms.types.StatsComplex.Builder();
    } else {
      return new sequential_algorithms.types.StatsComplex.Builder(other);
    }
  }

  /**
   * Creates a new StatsComplex RecordBuilder by copying an existing StatsComplex instance.
   * @param other The existing instance to copy.
   * @return A new StatsComplex RecordBuilder
   */
  public static sequential_algorithms.types.StatsComplex.Builder newBuilder(sequential_algorithms.types.StatsComplex other) {
    if (other == null) {
      return new sequential_algorithms.types.StatsComplex.Builder();
    } else {
      return new sequential_algorithms.types.StatsComplex.Builder(other);
    }
  }

  /**
   * RecordBuilder for StatsComplex instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<StatsComplex>
    implements org.apache.avro.data.RecordBuilder<StatsComplex> {

    private long sum;
    private sequential_algorithms.types.Complex complex;
    private sequential_algorithms.types.Complex.Builder complexBuilder;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(sequential_algorithms.types.StatsComplex.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.sum)) {
        this.sum = data().deepCopy(fields()[0].schema(), other.sum);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.complex)) {
        this.complex = data().deepCopy(fields()[1].schema(), other.complex);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (other.hasComplexBuilder()) {
        this.complexBuilder = sequential_algorithms.types.Complex.newBuilder(other.getComplexBuilder());
      }
    }

    /**
     * Creates a Builder by copying an existing StatsComplex instance
     * @param other The existing instance to copy.
     */
    private Builder(sequential_algorithms.types.StatsComplex other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.sum)) {
        this.sum = data().deepCopy(fields()[0].schema(), other.sum);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.complex)) {
        this.complex = data().deepCopy(fields()[1].schema(), other.complex);
        fieldSetFlags()[1] = true;
      }
      this.complexBuilder = null;
    }

    /**
      * Gets the value of the 'sum' field.
      * @return The value.
      */
    public long getSum() {
      return sum;
    }


    /**
      * Sets the value of the 'sum' field.
      * @param value The value of 'sum'.
      * @return This builder.
      */
    public sequential_algorithms.types.StatsComplex.Builder setSum(long value) {
      validate(fields()[0], value);
      this.sum = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'sum' field has been set.
      * @return True if the 'sum' field has been set, false otherwise.
      */
    public boolean hasSum() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'sum' field.
      * @return This builder.
      */
    public sequential_algorithms.types.StatsComplex.Builder clearSum() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'complex' field.
      * @return The value.
      */
    public sequential_algorithms.types.Complex getComplex() {
      return complex;
    }


    /**
      * Sets the value of the 'complex' field.
      * @param value The value of 'complex'.
      * @return This builder.
      */
    public sequential_algorithms.types.StatsComplex.Builder setComplex(sequential_algorithms.types.Complex value) {
      validate(fields()[1], value);
      this.complexBuilder = null;
      this.complex = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'complex' field has been set.
      * @return True if the 'complex' field has been set, false otherwise.
      */
    public boolean hasComplex() {
      return fieldSetFlags()[1];
    }

    /**
     * Gets the Builder instance for the 'complex' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public sequential_algorithms.types.Complex.Builder getComplexBuilder() {
      if (complexBuilder == null) {
        if (hasComplex()) {
          setComplexBuilder(sequential_algorithms.types.Complex.newBuilder(complex));
        } else {
          setComplexBuilder(sequential_algorithms.types.Complex.newBuilder());
        }
      }
      return complexBuilder;
    }

    /**
     * Sets the Builder instance for the 'complex' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public sequential_algorithms.types.StatsComplex.Builder setComplexBuilder(sequential_algorithms.types.Complex.Builder value) {
      clearComplex();
      complexBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'complex' field has an active Builder instance
     * @return True if the 'complex' field has an active Builder instance
     */
    public boolean hasComplexBuilder() {
      return complexBuilder != null;
    }

    /**
      * Clears the value of the 'complex' field.
      * @return This builder.
      */
    public sequential_algorithms.types.StatsComplex.Builder clearComplex() {
      complex = null;
      complexBuilder = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public StatsComplex build() {
      try {
        StatsComplex record = new StatsComplex();
        record.sum = fieldSetFlags()[0] ? this.sum : (java.lang.Long) defaultValue(fields()[0]);
        if (complexBuilder != null) {
          try {
            record.complex = this.complexBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("complex"));
            throw e;
          }
        } else {
          record.complex = fieldSetFlags()[1] ? this.complex : (sequential_algorithms.types.Complex) defaultValue(fields()[1]);
        }
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<StatsComplex>
    WRITER$ = (org.apache.avro.io.DatumWriter<StatsComplex>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<StatsComplex>
    READER$ = (org.apache.avro.io.DatumReader<StatsComplex>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeLong(this.sum);

    this.complex.customEncode(out);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.sum = in.readLong();

      if (this.complex == null) {
        this.complex = new sequential_algorithms.types.Complex();
      }
      this.complex.customDecode(in);

    } else {
      for (int i = 0; i < 2; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.sum = in.readLong();
          break;

        case 1:
          if (this.complex == null) {
            this.complex = new sequential_algorithms.types.Complex();
          }
          this.complex.customDecode(in);
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










