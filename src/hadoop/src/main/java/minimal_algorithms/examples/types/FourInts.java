/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package minimal_algorithms.hadoop.examples.types;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class FourInts extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -1272315695732398413L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"FourInts\",\"namespace\":\"minimal_algorithms.hadoop.examples.types\",\"fields\":[{\"name\":\"first\",\"type\":\"int\"},{\"name\":\"second\",\"type\":\"int\"},{\"name\":\"third\",\"type\":\"int\"},{\"name\":\"fourth\",\"type\":\"int\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public int first;
  @Deprecated public int second;
  @Deprecated public int third;
  @Deprecated public int fourth;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public FourInts() {}

  /**
   * All-args constructor.
   * @param first The new value for first
   * @param second The new value for second
   * @param third The new value for third
   * @param fourth The new value for fourth
   */
  public FourInts(java.lang.Integer first, java.lang.Integer second, java.lang.Integer third, java.lang.Integer fourth) {
    this.first = first;
    this.second = second;
    this.third = third;
    this.fourth = fourth;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return first;
    case 1: return second;
    case 2: return third;
    case 3: return fourth;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: first = (java.lang.Integer)value$; break;
    case 1: second = (java.lang.Integer)value$; break;
    case 2: third = (java.lang.Integer)value$; break;
    case 3: fourth = (java.lang.Integer)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'first' field.
   * @return The value of the 'first' field.
   */
  public java.lang.Integer getFirst() {
    return first;
  }

  /**
   * Sets the value of the 'first' field.
   * @param value the value to set.
   */
  public void setFirst(java.lang.Integer value) {
    this.first = value;
  }

  /**
   * Gets the value of the 'second' field.
   * @return The value of the 'second' field.
   */
  public java.lang.Integer getSecond() {
    return second;
  }

  /**
   * Sets the value of the 'second' field.
   * @param value the value to set.
   */
  public void setSecond(java.lang.Integer value) {
    this.second = value;
  }

  /**
   * Gets the value of the 'third' field.
   * @return The value of the 'third' field.
   */
  public java.lang.Integer getThird() {
    return third;
  }

  /**
   * Sets the value of the 'third' field.
   * @param value the value to set.
   */
  public void setThird(java.lang.Integer value) {
    this.third = value;
  }

  /**
   * Gets the value of the 'fourth' field.
   * @return The value of the 'fourth' field.
   */
  public java.lang.Integer getFourth() {
    return fourth;
  }

  /**
   * Sets the value of the 'fourth' field.
   * @param value the value to set.
   */
  public void setFourth(java.lang.Integer value) {
    this.fourth = value;
  }

  /**
   * Creates a new FourInts RecordBuilder.
   * @return A new FourInts RecordBuilder
   */
  public static minimal_algorithms.hadoop.examples.types.FourInts.Builder newBuilder() {
    return new minimal_algorithms.hadoop.examples.types.FourInts.Builder();
  }

  /**
   * Creates a new FourInts RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new FourInts RecordBuilder
   */
  public static minimal_algorithms.hadoop.examples.types.FourInts.Builder newBuilder(minimal_algorithms.hadoop.examples.types.FourInts.Builder other) {
    return new minimal_algorithms.hadoop.examples.types.FourInts.Builder(other);
  }

  /**
   * Creates a new FourInts RecordBuilder by copying an existing FourInts instance.
   * @param other The existing instance to copy.
   * @return A new FourInts RecordBuilder
   */
  public static minimal_algorithms.hadoop.examples.types.FourInts.Builder newBuilder(minimal_algorithms.hadoop.examples.types.FourInts other) {
    return new minimal_algorithms.hadoop.examples.types.FourInts.Builder(other);
  }

  /**
   * RecordBuilder for FourInts instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<FourInts>
    implements org.apache.avro.data.RecordBuilder<FourInts> {

    private int first;
    private int second;
    private int third;
    private int fourth;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(minimal_algorithms.hadoop.examples.types.FourInts.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.first)) {
        this.first = data().deepCopy(fields()[0].schema(), other.first);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.second)) {
        this.second = data().deepCopy(fields()[1].schema(), other.second);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.third)) {
        this.third = data().deepCopy(fields()[2].schema(), other.third);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.fourth)) {
        this.fourth = data().deepCopy(fields()[3].schema(), other.fourth);
        fieldSetFlags()[3] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing FourInts instance
     * @param other The existing instance to copy.
     */
    private Builder(minimal_algorithms.hadoop.examples.types.FourInts other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.first)) {
        this.first = data().deepCopy(fields()[0].schema(), other.first);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.second)) {
        this.second = data().deepCopy(fields()[1].schema(), other.second);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.third)) {
        this.third = data().deepCopy(fields()[2].schema(), other.third);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.fourth)) {
        this.fourth = data().deepCopy(fields()[3].schema(), other.fourth);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'first' field.
      * @return The value.
      */
    public java.lang.Integer getFirst() {
      return first;
    }

    /**
      * Sets the value of the 'first' field.
      * @param value The value of 'first'.
      * @return This builder.
      */
    public minimal_algorithms.hadoop.examples.types.FourInts.Builder setFirst(int value) {
      validate(fields()[0], value);
      this.first = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'first' field has been set.
      * @return True if the 'first' field has been set, false otherwise.
      */
    public boolean hasFirst() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'first' field.
      * @return This builder.
      */
    public minimal_algorithms.hadoop.examples.types.FourInts.Builder clearFirst() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'second' field.
      * @return The value.
      */
    public java.lang.Integer getSecond() {
      return second;
    }

    /**
      * Sets the value of the 'second' field.
      * @param value The value of 'second'.
      * @return This builder.
      */
    public minimal_algorithms.hadoop.examples.types.FourInts.Builder setSecond(int value) {
      validate(fields()[1], value);
      this.second = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'second' field has been set.
      * @return True if the 'second' field has been set, false otherwise.
      */
    public boolean hasSecond() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'second' field.
      * @return This builder.
      */
    public minimal_algorithms.hadoop.examples.types.FourInts.Builder clearSecond() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'third' field.
      * @return The value.
      */
    public java.lang.Integer getThird() {
      return third;
    }

    /**
      * Sets the value of the 'third' field.
      * @param value The value of 'third'.
      * @return This builder.
      */
    public minimal_algorithms.hadoop.examples.types.FourInts.Builder setThird(int value) {
      validate(fields()[2], value);
      this.third = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'third' field has been set.
      * @return True if the 'third' field has been set, false otherwise.
      */
    public boolean hasThird() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'third' field.
      * @return This builder.
      */
    public minimal_algorithms.hadoop.examples.types.FourInts.Builder clearThird() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'fourth' field.
      * @return The value.
      */
    public java.lang.Integer getFourth() {
      return fourth;
    }

    /**
      * Sets the value of the 'fourth' field.
      * @param value The value of 'fourth'.
      * @return This builder.
      */
    public minimal_algorithms.hadoop.examples.types.FourInts.Builder setFourth(int value) {
      validate(fields()[3], value);
      this.fourth = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'fourth' field has been set.
      * @return True if the 'fourth' field has been set, false otherwise.
      */
    public boolean hasFourth() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'fourth' field.
      * @return This builder.
      */
    public minimal_algorithms.hadoop.examples.types.FourInts.Builder clearFourth() {
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    public FourInts build() {
      try {
        FourInts record = new FourInts();
        record.first = fieldSetFlags()[0] ? this.first : (java.lang.Integer) defaultValue(fields()[0]);
        record.second = fieldSetFlags()[1] ? this.second : (java.lang.Integer) defaultValue(fields()[1]);
        record.third = fieldSetFlags()[2] ? this.third : (java.lang.Integer) defaultValue(fields()[2]);
        record.fourth = fieldSetFlags()[3] ? this.fourth : (java.lang.Integer) defaultValue(fields()[3]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
